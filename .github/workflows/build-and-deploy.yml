name: CI

# 1
# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the master branch
  push:
    branches: [release]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: "Image version"
        required: true
#2
env:
  REGISTRY: "registry.gitlab.com/nola-mediatech"
  IMAGE_NAME: "swd-table-reservation"
  NETWORK_NAME: "prm-mysql-springboot-network"
  MYSQL_CONTAINER_NAME: "prm-mysqldb"
  SPRINGBOOT_CONTAINER_NAME: "swd-springboot"

#3
jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "adopt"

      - name: Build with maven
        run: mvn clean package -Pdocker -DskipTests

      - name: Build docker image
        run: docker build -t $(echo $REGISTRY)/$(echo $IMAGE_NAME) .

      - name: Login to Gitlab Container Registry
        run: docker login -u ${{ secrets.GITLAB_USERNAME }} -p ${{ secrets.GITLAB_PERSONAL_ACCESS_TOKEN }} $(echo $REGISTRY)
        
      - name: Push image to Gitlab Container Registry
        run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME)

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Deploy to Digital Ocean via SSH action
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          envs: IMAGE_NAME,REGISTRY,NETWORK_NAME,MYSQL_CONTAINER_NAME,SPRINGBOOT_CONTAINER_NAME,{{ secrets.GITLAB_PERSONAL_ACCESS_TOKEN }},GITHUB_SHA
          script: |
            # Login to DigitalOcean Container Registry
            docker login -u $(echo ${{ secrets.GITLAB_PERSONAL_ACCESS_TOKEN }}) -p $(echo ${{ secrets.GITLAB_PERSONAL_ACCESS_TOKEN }}) registry.gitlab.com

            # Check if network exists
            if [ -z "$(docker network ls | grep "$(echo $NETWORK_NAME)")" ]; 
            then docker network create $(echo $NETWORK_NAME); 
            else echo "Network already exists"; 
            fi
            # Check if mysql container exists
            if [ -z "$(docker ps -a | grep "$(echo $MYSQL_CONTAINER_NAME)")" ]; 
            then docker run -d \
            -p 3306:3306 \
            --restart always \
            --name $(echo $MYSQL_CONTAINER_NAME) \
            --network $(echo $NETWORK_NAME) \
            -e MYSQL_ROOT_PASSWORD=test \
            mysql; 
            else echo "Container already exists"; fi

            # Stop running container
            docker stop $(echo $SPRINGBOOT_CONTAINER_NAME)
            # Remove old container
            docker rm $(echo $SPRINGBOOT_CONTAINER_NAME)
            # Remove old image
            docker rmi $(echo $REGISTRY)/$(echo $IMAGE_NAME)
            # Run a new container from a new image
            docker run -d \
            --restart always \
            --name $(echo $SPRINGBOOT_CONTAINER_NAME) \
            --network $(echo $NETWORK_NAME) \
            -e "SPRING_PROFILES_ACTIVE=docker" \
            -p 8081:8081 \
            $(echo $REGISTRY)/$(echo $IMAGE_NAME)
      - name: Wait for deployment to finish
        run: sleep 45s

      - name: Test deployment
        run: |
          HEALTH_CHECK_URL="https://api.swd.nolamedia.tech/actuator/health"
          RESPONSE=$(curl -sSf -o /dev/null -w "%{http_code}" $HEALTH_CHECK_URL)
          
          if [ "$RESPONSE" = "200" ]; then
            echo "Deployment is successful. The application is healthy."
          else
            echo "Deployment failed. The application is not running properly. Response code: $RESPONSE"
            exit 1
          fi